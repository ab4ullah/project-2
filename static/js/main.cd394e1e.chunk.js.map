{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","state","completed","checked","_this","props","listitems","complete","updateCompleteList","id","setState","_this2","this","react_default","a","createElement","className","onClick","note","role","aria-label","remove","Component","App","listData","ListItem","updateForm","event","newData","target","value","OriginalState","copy","Object","assign","name","submitForm","preventDefault","slice","trim","push","MySwal","withReactContent","Swal","fire","title","footer","onOpen","clickConfirm","then","clearAll","isComplete","index","console","log","removeItem","list","newListItem","filter","item","output","NotesList","map","src_List","key","length","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd394e1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass List extends Component {\n  // completed state that used in checked function\n  state = {\n    completed: 'false'\n  }\n  // checked function to check if the user click on text change toogle ( set false or completed value )\n  checked = () => {\n    // if (this.state.completed === 'false') {\n    //   this.setState({ completed: 'completed' })\n    // } else {\n    //   this.setState({ completed: 'false' })\n    // }\n\n    if (this.props.listitems.complete === 'false') {\n      this.props.updateCompleteList( 'completed' , this.props.id  )\n      this.setState({ completed: 'completed' })\n\n    } else {\n\n      this.props.updateCompleteList( 'false' , this.props.id  )\n      this.setState({ completed: 'false' })\n    }\n\n\n  }\n\n  render() {\n    return (\n\n      // ruturn as row with three columns\n      <tr>\n        {/* ruturn id that pass from the map and put it on the cell and apply the style if the user click on the second cell */}\n        <td className={this.props.listitems.complete}>{this.props.id + 1}</td>\n        {/* ruturn the array vlaue (note) that pass from the map and put it on the cell and apply the style if the user click on the text */}\n        <td onClick={this.checked}> <span className={this.props.listitems.complete}>{this.props.listitems.note}</span>  </td>\n        {/* if the user click on X you will use the remove functio (this function is in app.js and we pass the note as parmeter) */}\n        <td><span role=\"img\" aria-label=\"delete\" onClick={() => this.props.remove(this.props.listitems.note )} >‚ùå</span></td>\n      </tr>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from 'react';\n// import css file\nimport './App.css';\n// import List class from List file\nimport List from './List';\n// import sweetalert library\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nclass App extends Component {\n\n  state = {\n    listData: {\n      note: '',\n      complete: 'false'\n    },\n    // the array for task\n    ListItem: [\n\n    ]\n  }\n\n  // this function for take the user value and set the data to the states\n  updateForm = (event) => {\n    // take the user value and save it in newData varibal\n    const newData = (event.target.value);\n    // take a copy of the orginal object\n    const OriginalState = this.state.listData;\n    // assign the copy\n    const copy = Object.assign({}, OriginalState);\n    // take the name of input \n    const key = event.target.name;\n    // assign the new data to the copy\n    copy[key] = newData\n\n    // set the data to the list data\n    this.setState({\n      listData: copy\n    })\n  }\n  // this function for make a copy from array and push the new value if the input value it is not empty\n  submitForm = (event) => {\n    // do not refrese the page\n    event.preventDefault()\n    // take a copy of the array\n    const copy = this.state.ListItem.slice(0)\n    //in cause the use not type empty string push the data to array\n    if (this.state.listData.note.trim() !== '') {\n      // push the data to the array\n      copy.push(this.state.listData)\n      // set state empty to be ready to next vlaue\n      this.setState({\n        ListItem: copy,\n        listData: {\n          note: ''\n        }\n      })\n    }\n    //\n    else {\n      const MySwal = withReactContent(Swal)\n      MySwal.fire({\n        title: <p>Hello World</p>,\n        footer: 'Copyright 2018',\n        onOpen: () => {\n          // `MySwal` is a subclass of `Swal`\n          //   with all the same instance & static methods\n          MySwal.clickConfirm()\n        }\n      }).then(() => {\n        return MySwal.fire(<p>Type what you want to do</p>)\n      })\n\n    }\n\n  }\n  // this function for remove the all array values \n  clearAll = (event) => {\n    event.preventDefault()\n    this.setState({\n      ListItem: []\n    })\n  }\n\n  updateCompleteList = (isComplete , index) =>  {\n\n    \n    console.log(isComplete , index , \"\\n\\n\\n\\n ***** \")\n\n    console.log(this.state.ListItem )\n    const copy = this.state.ListItem.slice(0)\n\n    copy[index].complete = isComplete ; \n\n    this.setState({\n      ListItem: copy \n    })\n  }\n  // this function for remove one vlaue\n  removeItem = (list ) => {\n\n  \n    // use filter go throw loop on array to find the clicked vlaue to remove it\n    const newListItem = this.state.ListItem.filter(item => item.note !== list);\n\n    // update the array after the removed\n    this.setState({\n      ListItem: newListItem\n    })\n\n    console.log(\"after filtering \" , this.state.ListItem)\n\n  }\n\n\n  // removeCompletedItem = (list) =>{\n  //   if (this.state.completed === 'completed'){\n  //     const CompeletedRemove = this.state.ListItem.filter(item => item.note !== list);\n  //  this.setState({\n  //    ListItem:CompeletedRemove\n  //  })\n\n  //   }\n  // }\n\n  render() {\n    // use map to pass the array value to list componets also pass the remove value and id\n    const NotesList = this.state.ListItem.map((list, index) => {\n      return <List key={index} id={index} listitems={list} remove={this.removeItem} updateCompleteList={this.updateCompleteList} />;\n\n    })\n    // window.localStorage.setItem(\"ListItem\", JSON.stringify(this.state.ListItem));\n    // // var getdata = localStorage.getItem('ListItem');\n    // // console.log(getdata);\n    // // checked if the array is empry show the empty div \n    let output;\n    if (this.state.ListItem.length === 0) {\n      output = <div id=\"empty\"><br /> <hr /> <br /> <hr /><h2>  You have no task to do </h2><hr /> <br /> <hr /> <br /></div>\n      // else show the div table Contents\n    } else {\n      output = <div id=\"tableContents\">\n        <hr />\n          <div className=\"vl\"></div>\n          <div className=\"vl2\"></div>\n        <table>\n          <thead>\n            <tr>\n              <th >#</th>\n              <th >Task</th>\n              <th >Remove</th>\n            </tr>\n          </thead>\n\n          <tbody>\n\n            {NotesList}\n\n          </tbody>\n\n        </table>\n        <hr />\n        <button id=\"ClearBtn\" onClick={this.clearAll} >clear list </button>\n      </div>\n    }\n\n\n    return (\n      // mainDiv is wrapper all contents and shadow the contents \n      // form use to submit data and input to update data\n      // button is hidden\n      // output variable from the render\n      \n        <div id='mainDiv'>\n          <header>\n            <h1><span id=\"firstText\">My to do</span> <span id=\"twoText\">list</span></h1>\n            <form onSubmit={this.submitForm}>\n              <input type='text' name='note' placeholder=\"what you will do next\" onChange={this.updateForm} value={this.state.listData.note} />\n              <button id=\"addbtn\" type='submit'>Add</button>\n            </form>\n          </header>\n          {output}\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}